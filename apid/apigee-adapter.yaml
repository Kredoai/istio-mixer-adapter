# 1. Define Kubernetes CRDs
---
# define adapter 'apigee'
kind: CustomResourceDefinition
apiVersion: apiextensions.k8s.io/v1beta1
metadata:
  name: apigees.config.istio.io
  labels:
    package: apigee
    istio: mixer-adapter
spec:
  group: config.istio.io
  names:
    kind: apigee
    plural: apigees
    singular: apigee
  scope: Namespaced
  version: v1alpha2
---
# define template 'auth'
kind: CustomResourceDefinition
apiVersion: apiextensions.k8s.io/v1beta1
metadata:
  name: auths.config.istio.io
  labels:
    package: auth
    istio: mixer-instance
spec:
  group: config.istio.io
  names:
    kind: auth
    plural: auths
    singular: auth
  scope: Namespaced
  version: v1alpha2

# 2. Create handler
---
# configure handler for adapter 'apigee'
apiVersion: "config.istio.io/v1alpha2"
kind: apigee
metadata:
  name: apigee-handler
  namespace: istio-system
spec:
  apid_base: http://apid:9000
  org_name: edgex01

# 3. Create instances
#---
## configure instance of template 'auth'
#apiVersion: "config.istio.io/v1alpha2"
#kind: auth
#metadata:
#  name: apigee-auth
#  namespace: istio-system
#spec:
#  apikey: request.headers["apikey"] | ""
#  uripath: request.path | "/"
#  apigeeproxy: "helloworld"
#---
## configure instance of template 'logentry'
#apiVersion: "config.istio.io/v1alpha2"
#kind: logentry
#metadata:
#  name: apigee-analytics
#  namespace: istio-system
#spec:
#  severity: '"Default"'
#  timestamp: request.time
#  variables:
#    apikey: request.headers["apikey"] | "" # HACK
#    apigeeproxy: "helloworld"
#    response_status_code: response.code | 0
#    client_ip: source.ip | ip("0.0.0.0")
#    request_verb: request.method | ""
#    request_uri: request.path | ""
#    request_path: request.path | ""
#    useragent: request.useragent | ""
#    client_received_start_timestamp: request.time
#    client_received_end_timestamp: request.time
#    client_sent_start_timestamp: response.time
#    client_sent_end_timestamp: response.time
#  monitoredResourceType: '"UNSPECIFIED"'
