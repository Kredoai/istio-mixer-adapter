// Copyright 2017 Istio Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// THIS FILE IS AUTOMATICALLY GENERATED.

package analytics

import (
	"context"
	"net"
	"time"

	"istio.io/istio/mixer/pkg/adapter"
)

// Fully qualified name of the template
const TemplateName = "analytics"

// Instance is constructed by Mixer for the 'analytics' template.
type Instance struct {
	// Name of the instance as specified in configuration.
	Name string

	ApiProxy string

	ResponseStatusCode int64

	ClientIp net.IP

	RequestVerb string

	RequestUri string

	RequestPath string

	Useragent string

	ClientReceivedStartTimestamp time.Time

	ClientReceivedEndTimestamp time.Time

	ClientSentStartTimestamp time.Time

	ClientSentEndTimestamp time.Time

	TargetSentStartTimestamp time.Time

	TargetSentEndTimestamp time.Time

	TargetReceivedStartTimestamp time.Time

	TargetReceivedEndTimestamp time.Time

	// auth: if jwt is available (takes precedence over api_key)
	ApiClaims map[string]string

	// auth: if jwt isn't available and apikey is
	ApiKey string
}

// HandlerBuilder must be implemented by adapters if they want to
// process data associated with the 'analytics' template.
//
// Mixer uses this interface to call into the adapter at configuration time to configure
// it with adapter-specific configuration as well as all template-specific type information.
type HandlerBuilder interface {
	adapter.HandlerBuilder

	// SetAnalyticsTypes is invoked by Mixer to pass the template-specific Type information for instances that an adapter
	// may receive at runtime. The type information describes the shape of the instance.
	SetAnalyticsTypes(map[string]*Type /*Instance name -> Type*/)
}

// Handler must be implemented by adapter code if it wants to
// process data associated with the 'analytics' template.
//
// Mixer uses this interface to call into the adapter at request time in order to dispatch
// created instances to the adapter. Adapters take the incoming instances and do what they
// need to achieve their primary function.
//
// The name of each instance can be used as a key into the Type map supplied to the adapter
// at configuration time via the method 'SetAnalyticsTypes'.
// These Type associated with an instance describes the shape of the instance
type Handler interface {
	adapter.Handler

	// HandleAnalytics is called by Mixer at request time to deliver instances to
	// to an adapter.
	HandleAnalytics(context.Context, []*Instance) error
}
